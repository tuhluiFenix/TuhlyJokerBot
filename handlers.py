from telegram import Update
from telegram.ext import ContextTypes
from keyboards import MAIN_KEYBOARD
from clients.reddit import RedditClient
import os
import mimetypes


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        text="*–í—ã–±–µ—Ä–∏ –ø—É—Ç—å, –ø—É—Ç–Ω–∏–∫:*",
        reply_markup=MAIN_KEYBOARD,
        parse_mode="Markdown"
    )


async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    button_text = update.message.text

    if button_text == "–†–∞–¥–æ—Å—Ç—å üòä":
        reddit = RedditClient(
            os.getenv("REDDIT_CLIENT_ID"),
            os.getenv("REDDIT_SECRET")
        )

        memes = reddit.get_happy_memes(limit=5)

        if not memes:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–¥–æ—Å—Ç–Ω—ã–µ –º–µ–º—ã üò¢")
            return

        for meme in memes:
            try:
                url = meme['url']
                mime_type, _ = mimetypes.guess_type(url)

                if mime_type and mime_type.startswith('image/'):
                    if mime_type.endswith('gif'):
                        await update.message.reply_animation(
                            animation=url,
                            caption=f"{meme['title']}\n(—Å r/{meme['subreddit']})"
                        )
                    else:
                        await update.message.reply_photo(
                            photo=url,
                            caption=f"{meme['title']}\n(—Å r/{meme['subreddit']})"
                        )
                elif url.endswith(('.mp4', '.webm')):
                    await update.message.reply_video(
                        video=url,
                        caption=f"{meme['title']}\n(—Å r/{meme['subreddit']})"
                    )
                else:
                    await update.message.reply_text(
                        f"{meme['title']}\n(—Å r/{meme['subreddit']})\n{url}"
                    )
                break  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–µ–º

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–º–∞: {e}")
                continue

        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–∞–¥–æ—Å—Ç—å"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    responses = {
        "–ì—Ä—É—Å—Ç—å üò¢": "–ü–µ–ø–µ–ª –±—ã–ª—ã—Ö –º–µ–º–æ–≤ —Å–∫–æ—Ä–æ —è–≤–∏—Ç—Å—è... üò¢",
        "–ö–æ–¥ üíª": "**–ö—Ä—è—Ö—Ç—è—â–∏–π –º–µ–º –ø—Ä–æ –∫–æ–¥:**\n`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –≤–æ—Å—Å—Ç–∞–Ω–∏–µ...` üíª",
        "–ü—Ä–æ–∫–ª—è—Ç—å–µ üíÄ": "–¢—å–º–∞ —Å–≥—É—â–∞–µ—Ç—Å—è... –∂–¥–∏ –º–µ–º–æ–≤ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏ üïØÔ∏è"
    }

    await update.message.reply_text(
        text=responses.get(button_text, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ!"),
        parse_mode="Markdown"
    )
